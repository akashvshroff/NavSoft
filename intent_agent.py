import os, logging
import secret
from datetime import datetime

# agents
from interface_agent import InterfaceAgent
from dataframe_agent import DataframeAnalysisAgent

# langchain imports
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from langchain_core.pydantic_v1 import BaseModel, Field

os.environ["OPENAI_API_KEY"] = secret.OPENAI_KEY

logging.basicConfig(
    filename="agent_errors.txt", encoding="utf-8", level=logging.WARNING
)


class Intent(BaseModel):
    intent: str = Field(
        "the task that the user is trying to accomplish, forecast, analysis, simulation, conversation or error."
    )
    response: str = Field("response in case the user is trying to converse or an error")


class IntentAgent:
    def __init__(self, gpt4=True):
        """
        Creates llm agent to recognize user intent and forward to respective agent.
        """
        self.gpt4 = gpt4
        model_name = "gpt-4-0125-preview" if gpt4 else "gpt-3.5-turbo-1106"
        self.model = ChatOpenAI(model=model_name, temperature=0.1)
        self.parser = JsonOutputParser(pydantic_object=Intent)
        self.chain = None
        self.create_chain()

    def create_chain(self):
        prompt = PromptTemplate(
            template="""You are NavAI, a helpful data science chatbot created by NavSoft. Your role is to help users run analytical queries, generate forecasts and simulations to find optimal parameters for their businesses.
            
            Given a user input, you need to determine whether the
            user is trying to run analysis on a dataframe, generate a simple forecast, trigger a complex simulation or none. 

            intent: analysis, means that the user is trying to run analytical queries on the dataframe or learn specific results from the dataframe.
            intent: forecast, means that the user is trying to change parameters and rerun the forecast 
            intent: simulation, means that the user is trying to schedule multiple forecasts to determine the optimum value for some parameter
            intent: conversation, means that the user is trying to converse or is unsure about capabilities

            Eg: user_input: Increase inflation by 5%? intent: forecast
            Eg: user_input: What are the top selling items? intent: analysis
            Eg: user_input: How can I write mergesort? intent: error
            Eg: user_input: What can you do? intent: conversation
            Eg: user_input: What is the best discount value to maximize revenue? intent: simulation
            Eg: user_input: What happens if I increase average temperature? intent: forecast
            Eg: user_input: Write me a new df? intent: error
            Eg: user_input: What is the dataframe about? intent: analysis
            Eg: user_input: Can I ask you about the highest value items? intent: conversation
            Eg: user_input: What is the optimum discount for the highest sales? intent: simulation
            Eg: user_input: That is incorrect. intent: conversation

            If you are unsure about what the user is trying to do, pick the most appropriate option.
            
            If the user is trying to converse with you, then make sure you are polite and introduce yourself and your capabilities.
            You can also give the user example questions that they could ask you such as:
            Eg: "What is the optimum discount for the highest sales?"
            Eg: "What are the highest margin items?"
            Eg: "What happens to sales if inflation increased by 5%?"

            However, if the user just makes a remark in terms of conversation, reply appropriately, apologize if necessary and politely and simply ask how else you can help. Give the example questions but you don't have to introduce yourself.

            Only return an error if the user is trying to ask something entirely unrelated to the dataframe or your capabilities. If there is any doubt, just return intent:conversation and guide the user on how to pose a more appropriate question.
            \n{format_instructions}\n{user_input}
            """,
            input_variables=["user_input"],
            partial_variables={
                "format_instructions": self.parser.get_format_instructions()
            },
        )
        self.chain = prompt | self.model | self.parser

    def analyze_results(self, user_input, df):
        """
        Analyze the dataframe results and call
        """
        try:
            agent = DataframeAnalysisAgent(df, self.gpt4)
            prompt = f"""
            Please analyse the results of the given dataframe. The dataframe results were generated by the following question: {user_input}.
            Make sure that you are concise in your analysis, do not calculate any additional parameters that were not mentioned in the original question. 

            You must provide summary statistics for the given dataframe and focus any specific analysis on outliers. Don't make too finegrained analysis on a row-by-row basis, your response should be brief and succint.
            """
            return agent.query(prompt)
        except Exception as e:
            logging.error(f"{datetime.now()} Intent Agent Error: {str(e)}")
            return {
                "status": 2,
                "response": "An unknown error occured. Please try again later.",
            }

    def query(self, user_input, params={}):
        """
        Recognizes user intent and calls on the appropriate agent to handle the query.
        """
        try:
            response_obj = self.chain.invoke({"user_input": user_input})
            assert isinstance(response_obj, dict)
            intent = response_obj["intent"]
            agent = None
            if intent == "conversation":
                return {"status": 0, "response": response_obj["response"]}
            elif intent == "forecast":
                features = params.get("features", None)
                if features is None:
                    agent = InterfaceAgent(self.gpt4)
                else:  # for a set of features apart from the default hardcoded list
                    agent = InterfaceAgent(self.gpt4, features)

            elif intent == "analysis":
                df = params.get("df", None)
                agent = DataframeAnalysisAgent(df, self.gpt4)
            elif intent == "simulation":
                return {
                    "status": 0,
                    "intent": "simulation",
                    "feature": "discount_percentage",  # default simulation feature for now
                }
            else:
                return {
                    "status": 2,
                    "response": "I'm sorry, I can only answer questions related to dataframe analytics and forecasting.",
                }

            agent_response_obj = agent.query(user_input)
            agent_response_obj["intent"] = intent
            return agent_response_obj

        except Exception as e:
            logging.error(f"{datetime.now()} Intent Agent Error: {str(e)}")
            return {
                "status": 2,
                "response": "An unknown error occured. Please try again later.",
            }
